// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id         String @id @default(uuid()) @db.Uuid
  code       String
  name       String
  company_id String @db.Uuid

  types   Type[]
  company Company @relation(fields: [company_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("categories")
}

model Type {
  id          String @id @default(uuid()) @db.Uuid
  code        String
  name        String
  category_id String @db.Uuid

  category Category  @relation(fields: [category_id], references: [id])
  products Product[]
  prices   Price[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("types")
}

model Product {
  id          String  @id @default(uuid()) @db.Uuid
  code        String
  name        String
  status      Int // 0: Inactive, 1: Active, 2: Sold Out
  type_id     String  @db.Uuid
  store_id    String  @db.Uuid

  type          Type          @relation(fields: [type_id], references: [id])
  store         Store         @relation(fields: [store_id], references: [id])
  product_codes ProductCode[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("products")
}

model ProductCode {
  id          String  @id @default(uuid()) @db.Uuid
  barcode     String
  product_id  String  @db.Uuid
  weight      Decimal @db.Decimal
  fixed_price Decimal @db.Decimal
  status      Int // 0: Available 1: Sold Out 2: Taken

  product              Product              @relation(fields: [product_id], references: [id])
  transaction_products TransactionProduct[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("product_codes")
}

model Price {
  id        String   @id @default(uuid()) @db.Uuid
  price     Decimal  @db.Decimal
  is_active Boolean  @default(true)
  type_id   String   @db.Uuid
  date      DateTime

  type Type @relation(fields: [type_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("prices")
}

model Company {
  id   String @id @default(uuid()) @db.Uuid
  name String
  code String

  stores     Store[]
  categories Category[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("companies")
}

model Store {
  id             String  @id @default(uuid()) @db.Uuid
  code           String
  name           String
  company_id     String  @db.Uuid
  is_active      Boolean @default(true)
  is_flex_price  Boolean @default(false)
  is_float_price Boolean @default(false)
  poin_config    Int     @default(0)

  company      Company       @relation(fields: [company_id], references: [id])
  products     Product[]
  operations   Operation[]
  transactions Transaction[]
  vouchers     Voucher[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@index([company_id])
  @@map("stores")
}

model Operation {
  id       String  @id @default(uuid()) @db.Uuid
  code     String
  name     String
  price    Decimal @db.Decimal
  uom      String
  store_id String  @db.Uuid

  store                  Store                  @relation(fields: [store_id], references: [id])
  transaction_operations TransactionOperation[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@index([store_id])
  @@map("operations")
}

model Customer {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  email        String   @unique
  phone        String
  is_verified  Boolean  @default(false)
  device_token String[] @default([])

  transactions Transaction[]
  vouchers     VoucherOwned[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("customers")
}

model Voucher {
  id              String   @id @default(uuid()) @db.Uuid
  code            String
  name            String
  discount_amount Decimal  @db.Decimal
  poin_price      Int
  description     String?
  is_active       Boolean  @default(true)
  max_discount    Decimal  @db.Decimal
  min_purchase    Decimal  @db.Decimal
  start_date      DateTime
  end_date        DateTime
  store_id        String   @db.Uuid

  store        Store          @relation(fields: [store_id], references: [id])
  voucher_owns VoucherOwned[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("vouchers")
}

model VoucherOwned {
  id           String   @id @default(uuid()) @db.Uuid
  voucher_id   String   @db.Uuid
  customer_id  String   @db.Uuid
  is_used      Boolean  @default(false)
  purchesed_at DateTime

  voucher     Voucher       @relation(fields: [voucher_id], references: [id])
  customer    Customer      @relation(fields: [customer_id], references: [id])
  transaction Transaction[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("voucher_owneds")
}

model Transaction {
  id               String    @id @default(uuid()) @db.Uuid
  date             DateTime
  code             String
  transaction_type Int // 1: Sales, 2: Purchase, 3: Trade
  payment_method   Int // 1: Cash, 2: Bank Transfer, 3: Credit Card, 4: Debit Card
  paid_amount     Decimal   @db.Decimal @default(0) // Current Paid Ammount
  payment_link     String? // Payment link bisa expired
  poin_earned      Int       @default(0)
  expired_at       DateTime? // Expired payment link
  status           Int // 0: Draft/Pending, 1: Paid, 2: Done, -1: Cancelled
  sub_total_price  Decimal   @db.Decimal
  tax_price        Decimal   @db.Decimal
  total_price      Decimal   @db.Decimal
  comment          String?   @db.Text
  store_id         String    @db.Uuid
  customer_id      String    @db.Uuid
  voucher_own_id   String?   @db.Uuid
  employee_id      String?   @db.Uuid

  store                  Store                  @relation(fields: [store_id], references: [id])
  customer               Customer               @relation(fields: [customer_id], references: [id])
  voucher_used           VoucherOwned?          @relation(fields: [voucher_own_id], references: [id])
  employee                   User?              @relation(fields: [employee_id], references: [id])
  transaction_products   TransactionProduct[]
  transaction_operations TransactionOperation[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("transactions")
}

model TransactionProduct {
  id               String  @id @default(uuid()) @db.Uuid
  transaction_id   String  @db.Uuid
  product_code_id  String  @db.Uuid
  transaction_type Int // 1: Sales, 2: Purchase, 3: Trade
  name            String?
  type            String?
  weight           Decimal @db.Decimal
  price            Decimal @db.Decimal
  adjustment_price Decimal @db.Decimal
  discount         Decimal @db.Decimal
  total_price      Decimal @db.Decimal
  status           Int // 0: Available, 1: Sold Out, 2: Taken
  comment          String? @db.Text

  transaction  Transaction @relation(fields: [transaction_id], references: [id])
  product_code ProductCode @relation(fields: [product_code_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@index([transaction_id])
  @@map("transaction_products")
}

model TransactionOperation {
  id               String  @id @default(uuid()) @db.Uuid
  transaction_id   String  @db.Uuid
  operation_id     String  @db.Uuid
  name             String?
  type             String?
  unit             Decimal @db.Decimal
  price            Decimal @db.Decimal
  adjustment_price Decimal @db.Decimal
  total_price      Decimal @db.Decimal
  comment          String? @db.Text

  transaction Transaction @relation(fields: [transaction_id], references: [id])
  operation   Operation   @relation(fields: [operation_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@index([transaction_id])
  @@map("transaction_operations")
}

model User {
  id       String   @id @db.Uuid @default(uuid())
  name     String
  email   String   @unique

  Transactions Transaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  @@map("users")
  @@index([deleted_at]) // optimize for soft delete
  @@index([email]) // optimize for query
}